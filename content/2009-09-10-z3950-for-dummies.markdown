---
layout: wordpress-import
status: publish
published: true
title: 'Index Data on Z39.50 for Dummies'
modified: 2009-09-10T15:45:52+00:00
author: Peter Murray
author_login: lyrdor
author_email: jester@dltj.org
author_url: http://dltj.org/about
wordpress_id: 1251
wordpress_url: http://dltj.org/?p=1251
date: '2009-09-10 11:45:52 -0400'
date_gmt: '2009-09-10 15:45:52 -0400'
categories:
- Raw Technology
tags:
- description
- Index Data
- z39.50
- protocol
comments:
- id: 38066
  author: Ross Singer
  author_email: rossfsinger@gmail.com
  author_url: http://dilettantes.code4lib.org/
  date: '2009-09-10 12:01:16 -0400'
  date_gmt: '2009-09-10 16:01:16 -0400'
  content: "Only 15 years too late!\r\n\r\nI personally find it hard to fathom (and
    a little hard to stomach) any defense of Z39.50 and I would much rather IndexData
    spend the time and energy teaching people how to get up and running with SRU (and
    how to use it) rather than encouraging anybody, <em>anybody</em> to have to construct
    another PQN request to find a record in their collection.\r\n\r\nOf course, it's
    in their best interest to perpetuate Z39.50 as long as they can, just not anybody
    else's."
- id: 38067
  author: the Jester
  author_email: jester@dltj.org
  author_url: http://dltj.org/about
  date: '2009-09-10 12:49:25 -0400'
  date_gmt: '2009-09-10 16:49:25 -0400'
  content: Meh -- a protocol is a protocol, and a goodly number of the things I have
    to talk to with this metasearch project speak Z39.50.  With code libraries I don't
    have to do any of the BER encoding or crud like that.  Probably the same thing
    with SRU/SRW.
- id: 38068
  author: Ross Singer
  author_email: rossfsinger@gmail.com
  author_url: http://dilettantes.code4lib.org/
  date: '2009-09-10 13:10:08 -0400'
  date_gmt: '2009-09-10 17:10:08 -0400'
  content: "What client do you have that alleviates queries like:\r\n\r\n@and @or
    @attr 1=1003 twain @attr 1=1003 clemens @attr 1=4 \"Huckleberry Finn\"\r\n\r\nI
    mean, if nothing else, SRU eliminates having to remember bib-1 use attributes
    and the unintuitive nature of RPN.\r\n\r\nAlso, let's face it, how many vendors
    of your metasearch's Z39.50 targets actually know how it works or the best way
    to expose their data with it?\r\n\r\nA protocol isn't just a protocol - what if
    a vendor provided their data solely via gopher?  It's a protocol, after all!\r\n\r\nThere
    are two sides to any protocol:  consumers and producers.  If the protocol is arcane,
    niche, obsolete and unwieldy both sides suffer."
- id: 38071
  author: the Jester
  author_email: jester@dltj.org
  author_url: http://dltj.org/about
  date: '2009-09-10 16:49:50 -0400'
  date_gmt: '2009-09-10 20:49:50 -0400'
  content: "Okay, a protocol is more than just a protocol.  And, yeah, you have to
    look up what the BIB-1 use attributes mean.  (And, personally, I don't find reverse
    polish notation much of a barrier.)  \r\n\r\nBut I still have to look up in a
    standard how to construct SRU queries, just as I would the BIB-1 use attributes.
    \ And I get the benefits of a stateful connection for pulling back batches of
    records (useful in a metasearch context).  And I don't think SRU itself makes
    it all that much easier for vendors to understand how to expose their data in
    a standards-compliant manner.\r\n\r\nI may have a different opinion when this
    project is over, but for now I'm not dissin' Z39.50 because it is arcane and/or
    obsolete and/or unwieldy.  (Z39.50 and SRU both suffer from being \"niche.\")"
- id: 38086
  author: Sebastian Hammer
  author_email: quinn@indexdata.com
  author_url: ''
  date: '2009-09-11 07:58:49 -0400'
  date_gmt: '2009-09-11 11:58:49 -0400'
  content: Hey Ross. One of the fun things about the tools Wolfram was writing about
    is that they'll do SRU just as well. My own personal interest is in  *interoperability*,
    not protocols. The value of Z39.50 is that it's widely implemented (for a niche
    protocol). The value of SRU is that it's comparatively easy to implement on the
    client side (writing a good server still takes a lot of care). I'd encourage any
    server implementor to support both (and then some!) to enable maximum re-use --
    all of our tools support both protocols. Ultimately, the choice of protocol is
    not nearly as significant as what search options you support, what metadata you
    return, how fast you return it, etc.
- id: 38087
  author: Mike Taylor
  author_email: mike@indexdata.com
  author_url: http://www.miketaylor.org.uk/
  date: '2009-09-11 08:14:16 -0400'
  date_gmt: '2009-09-11 12:14:16 -0400'
  content: "Ross,\r\n\r\nUse the fine CCL parser:\r\nhttp://www.indexdata.com/yaz/doc/tools.html#CCL\r\n\r\nOr
    if you prefer SRU's query language, CQL, use that instead:\r\nhttp://www.indexdata.com/yaz/doc/tools.html#cql\r\n\r\nTools!
    \ They're great!  And free!"
- id: 38093
  author: Ross Singer
  author_email: rossfsinger@gmail.com
  author_url: http://dilettantes.code4lib.org/
  date: '2009-09-11 09:40:11 -0400'
  date_gmt: '2009-09-11 13:40:11 -0400'
  content: "Mike &amp; Sebastian, I do want to express my appreciation to IndexData
    (I realize this seems a little like a mixed message, but bear with me):  Yaz,
    YazProxy and Zebra have been essential to so much of the work I've done in the
    past.  I don't want to blame IndexData for Z39.50 - you just built the tools and
    their ubiquity in the scene is testimony to how good they are.\r\n\r\nThere is
    a tension, however.  It is counterproductive for Z39.50 to continue being the
    protocol of choice, but it is hard to unseat the incumbent - especially if the
    toolkit is sound.  Meanwhile, new players (from content providers to developers
    at libraries) enter the scene and have to deal with this protocol that is completely
    detached from the primary means we share data nowadays:  the web.\r\n\r\nEvery
    modern development language has built-in HTTP support.  Zero have Z39.50 support.\r\n\r\nThis
    is why I said I wish the time and energy was spent on making YazProxy as simple
    as possible for every library to run.  Z39.50, obviously, won't go away overnight,
    but as we start weaning it out of the client stack we can begin to think of life
    after Z39.50."
- id: 38098
  author: Sebastian Hammer
  author_email: quinn@indexdata.com
  author_url: http://www.indexdata.com
  date: '2009-09-11 11:01:12 -0400'
  date_gmt: '2009-09-11 15:01:12 -0400'
  content: 'Hey Ross, and thanks for the kind words. I think the key here is to keep
    us moving forward, and to be able to do as much as possible with as many information
    resources as possible. Legacy technologies don''t just go away: Even if YAZ-Proxy
    were the perfect, self-installing gadget, it would only reach a subset of the
    resources we''d like to talk to. Maybe Wolfram should call his posts SRU/Z39.50
    for dummies, because frankly, I consider them more or less interchangeable at
    this point... the key is not to limit your users, and part of the game in libraries
    is that SOME areas, like ILSes and library-specific service providers, sometimes
    don''t pick up new technologies as fast as we''d like. So the trick is to build
    cool, new applications on a mix of technologies, some of which are arguably *quite*
    mature.'
- id: 38166
  author: Vicky
  author_email: kachra65@gmail.com
  author_url: ''
  date: '2009-09-17 04:45:50 -0400'
  date_gmt: '2009-09-17 08:45:50 -0400'
  content: Have a look at the newest OpenILS in the stable Evergreen Pines, besides
    koha etc...  Z3950 is poised to grow. One thing that can be highlighted for Z39  is
    the lack of bloat in its data delivery as well as the speed of index query. Yes,
    the learning curve is much greater than half a day, but its well worth the efforts
    put in. Now, if only there were some way of creating a Singular Global Z39 entity
    that would be on OpenSource lines. LOC is stingy in its delivery model  (50 records
    max) at a time; bl.uk won't give usmarc; oclc charges through the roof. ...think
    tanks think...
- id: 164054
  author: Jon Gorman
  author_email: ''
  author_url: http://twitter.com/codexmonkey/status/7196072327
  date: '2009-12-30 13:45:28 -0500'
  date_gmt: '2009-12-30 18:45:28 -0500'
  content: '<span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">RT @rsinger: "Z3950 is poised to grow" -- http://bit.ly/5m8dGB
    -- Jesus Christ, just kill me now.</span></span>'
- id: 164055
  author: Sally Chambers
  author_email: ''
  author_url: http://twitter.com/schambers3/status/7189216065
  date: '2009-12-30 07:28:43 -0500'
  date_gmt: '2009-12-30 12:28:43 -0500'
  content: <span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">interoperability? RT @librarythingtim RT @rsinger
    "Z3950 is poised to grow" -- http://bit.ly/5m8dGB -- Jesus Christ, just kill me
    now.</span></span>
- id: 164056
  author: Tim Spalding
  author_email: ''
  author_url: http://twitter.com/librarythingtim/status/7185165722
  date: '2009-12-30 04:49:31 -0500'
  date_gmt: '2009-12-30 09:49:31 -0500'
  content: <span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">RT @rsinger "Z3950 is poised to grow" -- http://bit.ly/5m8dGB
    -- Jesus Christ, just kill me now.</span></span>
- id: 164057
  author: Ross Singer
  author_email: ''
  author_url: http://twitter.com/rsinger/status/7184481717
  date: '2009-12-30 04:25:34 -0500'
  date_gmt: '2009-12-30 09:25:34 -0500'
  content: <span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">"Z3950 is poised to grow" -- http://bit.ly/5m8dGB
    -- Jesus Christ, just kill me now.</span></span>
- id: 164058
  author: Fed Search Blog
  author_email: ''
  author_url: http://twitter.com/fedsearchblog/status/3934183374
  date: '2009-09-12 14:16:55 -0400'
  date_gmt: '2009-09-12 18:16:55 -0400'
  content: '<span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">(Disruptive Library Technology Jester) Index Data
    on Z39.50 for Dummies: http://bit.ly/3bOsTE</span></span>'
- id: 164060
  author: infopeep
  author_email: ''
  author_url: http://twitter.com/infopeep/status/3891298283
  date: '2009-09-10 17:04:16 -0400'
  date_gmt: '2009-09-10 21:04:16 -0400'
  content: '<span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">Murray, Peter: Index Data on Z39.50 for Dummies
    http://bit.ly/1abskf</span></span>'
- id: 164061
  author: Peter Murray
  author_email: ''
  author_url: http://twitter.com/datag/status/3889663520
  date: '2009-09-10 15:44:40 -0400'
  date_gmt: '2009-09-10 19:44:40 -0400'
  content: '<span class="topsy_trackback_comment"><span class="topsy_twitter_username"><span
    class="topsy_trackback_content">New blog post: Index Data on Z39.50 for Dummies
    http://bit.ly/3Wh7bz</span></span>'
- id: 630998
  author: Ted Lawless Using Z39.50 to produce a Stack View.
  author_email: ''
  author_url: http://lawlesst.github.io/notebook/z3950-scan.html
  date: '2013-07-11 10:32:08 -0400'
  date_gmt: '2013-07-11 14:32:08 -0400'
  content: "<!--%kramer-ref-pre%-->[...] For more information about the protocol and
    working with it I recommend the Z39.50 for Dummies series that IndexData put together
    in 2009. You can also read some of the arguments for and against still using Z39.50
    in the comment thread of this blog post on Disruptive Library Technology Jester.
    [...]<!--%kramer-ref-post%-->"
---
<p>Earlier this year, <a href="http://www.indexdata.com/" title="Information Toolmakers | Index Data" rel="homepage">Index Data</a> <a href="http://www.indexdata.com/blog/2009/07/welcome-index-datas-blog" title="Welcome to Index Data&amp;#039;s blog | Index Data">started</a> a new <a href="http://www.indexdata.com/blog/" title="Index Data's Blog">blog</a>.  I wanted to call out a series of posts (parts <a href="http://www.indexdata.com/blog/2009/08/z3950-dummies" title="Z39.50 for Dummies | Index Data">one</a> and <a href="http://www.indexdata.com/blog/2009/08/z3950-dummies-part-2" title="Z39.50 for Dummies Part 2 | Index Data">two</a>)  their newly started blog called <i>Z39.50 for Dummies</i>.  Wolfram Schneider on the Index Data staff wrote these two posts.<br />
<!--more--><br />
In the introductory posting, Wolfram says:<br />
<blockquote>Z39.50 is a client-server protocol for searching and retrieving information from remote computer databases. It is a mature low level protocol like HTTP and FTP. You don't implement Z39.50 yourself, you use the YAZ utilities and the libraries and frameworks for in other languages (C++, PHP, Perl, etc.).</p>
<p>There are many people who thinks that Z39.50 is a dead standard, and hard to understand. That is not true. Z39.50 is still growing in use, stable and very fast. It is the only widely available protocol for metasearch.</p>
<p>Using Z39.50 is not harder than using FTP. I think that the overhead for learning Z39.50 is less than a half day for an experienced programmer. Every problem which you have later is not related to the Z39.50 protocol itself, it is related to underlying system behind the Z39.50 server. Keep in mind that Z39.50 is an API to access (bibliographic) databases. It does not define how the data is structured and indexed in the database.</p></blockquote>
<p>I haven't had to create an FTP client from scratch (which, looking at its standard document, I would propose would be a complicated task), but I have done HTTP before.  Z39.50 is cumbersome enough to not want to do it from scratch, but the <a href="http://www.indexdata.com/yaz" title="YAZ toolkit from Index Data">YAZ toolkit</a> is a great abstraction from the underlying protocol complications.  I would second Wolfram's observation that difficulties with Z39.50 are most likely problems with the configuration of the server as well as underlying data structures and data encoding.</p>
<p>Thanks for taking on the "for Dummies" task, Wolfram, and I'm hoping to see more in the series -- how to troubleshoot connections, what all of the codes in the standard and the community profiles mean, perhaps some insight into how different flavors of Z39.50 servers operate, etc.</p>
