---
layout: wordpress-import
status: published
published: true
title: 'GSoC:  JPEG2000 JPIP Server and Viewer Applet'
modified: 2006-10-03T15:41:48+00:00
author: Peter Murray
author_login: lyrdor
author_email: jester@dltj.org
author_url: http://dltj.org/about
wordpress_id: 129
wordpress_url: http://dltj.org/2006/10/gsoc-jpip/
date: '2006-10-03 11:41:48 -0400'
date_gmt: '2006-10-03 15:41:48 -0400'
category: Library Technology
categories:
- Fedora
- JPEG2000
- Google Summer of Code
- Raw Technology
tags:
- jpeg2000
- digital libraries
- jpip
- j2karclib
- Kakadu Software
- Google Summer of Code
- Fedora Repository
comments:
- id: 5315
  author: "[Fedora-users] Re: OhioLINK JPIP Streaming disseminator for Fedora"
  author_email: ''
  author_url: http://article.gmane.org/gmane.comp.cms.fedora-commons.user/2143
  date: '2006-10-04 01:48:30 -0400'
  date_gmt: '2006-10-04 05:48:30 -0400'
  content: "<!--%kramer-ref-pre%-->[...] [Fedora-users] Re: OhioLINK JPIP Streaming
    disseminator for Fedora          [Fedora-users] Re: OhioLINK JPIP Streaming disseminator
    for Fedora Peter Murray peter at OhioLINK.edu  Tue Oct 3 11:45:18 EDT 2006  Previous
    message: [Fedora-users] Fedora Outreach - User Survey Online Now!  Next message:
    [Fedora-users] Invalid byte 2 of 3-byte UTF-8 sequence   Messages sorted by: [
    date ] [ thread ] [ subject ] [ author ]     On 09/29/06 14:16, tiendoan at comcast.net
    wrote: > Could you please post an update on the progress/result of the project
    ?  A work-still-in-progress, but we have reached a nice plateau. I've just posted
    a summary of the effort thus far: GSoC: JPEG2000 JPIP Server and Viewer Applet
    http://dltj.org/2006/10/gsoc-jpip/ Peter -- Peter Murray http://www.pandc.org/peter/work/
    Assistant Director, Multimedia Systems tel:+1-614-728-3600;ext=338 OhioLINK: the
    Ohio Library and Information Network Columbus, Ohio The Disruptive Library Technology
    Jester http://dltj.org/      Previous message: [Fedora-users] Fedora Outreach
    - User Survey Online Now!  Next message: [Fedora-users] Invalid byte 2 of 3-byte
    UTF-8 sequence   Messages sorted by: [ date ] [ thread ] [ subject ] [ author
    ]    More information about the Fedora-users mailing list [...]<!--%kramer-ref-post%-->"
- id: 5500
  author: Ma.gnolia.com - Find Web Sites &amp; Build Community Online
  author_email: ''
  author_url: ''
  date: '2006-10-09 05:18:39 -0400'
  date_gmt: '2006-10-09 09:18:39 -0400'
  content: "<!--%kramer-ref-pre%-->[...] GSoC: JPEG2000 JPIP Server and Viewer Applet
    [...]<!--%kramer-ref-post%-->"
- id: 21862
  author: JPEG 2000 in Archives and Libraries
  author_email: ''
  author_url: ''
  date: '2007-08-28 13:28:05 -0400'
  date_gmt: '2007-08-28 17:28:05 -0400'
  content: "<!--%kramer-pre%-->Image Technical Primer - Archived Spaces - ConfluenceGSoC:
    JPEG2000 JPIP Server and Viewer Applet in Disruptive Library Technology JesterMozilla2:ImageLib
    - MozillaWiki JPEG 2000 Part 1 (Core) jp2 File Format<!--%kramer-post%-->"
- id: 33188
  author: ornot
  author_email: bin.li1@carestreamhealth.com
  author_url: ''
  date: '2008-05-08 03:59:44 -0400'
  date_gmt: '2008-05-08 07:59:44 -0400'
  content: I don't know if the lastest version of j2kViewer had made some changes
    in the orignal source codes. But those codes  which can be checked out from the
    subversion can make the GUI dead-like if the response to the previous request
    can not be returned assp.  When you stop the decoding, the  thread join will pend
    there.
- id: 33189
  author: the Jester
  author_email: jester@dltj.org
  author_url: http://dltj.org/about
  date: '2008-05-08 09:18:41 -0400'
  date_gmt: '2008-05-08 13:18:41 -0400'
  content: "@ornot - You might try contacting Juan Pablo directly.  I have not worked
    with the code since he checked it in, so I have forgotten about most of how it
    works."
- id: 33193
  author: ornot
  author_email: bin.li1@carestreamhealth.com
  author_url: ''
  date: '2008-05-08 21:36:53 -0400'
  date_gmt: '2008-05-09 01:36:53 -0400'
  content: "Sorry but how can I reach Juan Pablo Garcia Ortiz? \r\nThanks in advance."
- id: 33241
  author: the Jester
  author_email: jester@dltj.org
  author_url: http://dltj.org/about
  date: '2008-05-12 09:30:14 -0400'
  date_gmt: '2008-05-12 13:30:14 -0400'
  content: "@ornot:  The last contact information I have for him is jportiz-at-ace.ual.es.
    \ That is several years old, however."
- id: 33738
  author: Nabble - PanoToolsNG - Just stumbled across an old reference to GSoC and
    JPIP and JJ2000...
  author_email: ''
  author_url: ''
  date: '2008-08-19 15:22:13 -0400'
  date_gmt: '2008-08-19 19:22:13 -0400'
  content: "<!--%kramer-ref-pre%-->[...] Delete'); } document.writeln('| Print');
    \ | View Threaded | Show Only this Message     http://dltj.org/article/gsoc-jpip/This
    is the first of three posts summarizing the efforts of three students; this one
    details the [...]<!--%kramer-ref-post%-->"
- id: 36945
  author: JHelioviewer
  author_email: ''
  author_url: http://www.ghostshipmorphy.com/?p=253
  date: '2009-07-07 00:25:27 -0400'
  date_gmt: '2009-07-07 04:25:27 -0400'
  content: "[...] ended up finding a Google Summer of Code project by Juan Pablo Ortiz
    that seemed like a good place to start and spent the next several months with
    [...]"
- id: 61123
  author: Hao
  author_email: zhen0057@singnet.com.sg
  author_url: ''
  date: '2010-03-25 12:04:57 -0400'
  date_gmt: '2010-03-25 16:04:57 -0400'
  content: Hi all. Does anyone know how to save the BufferedImage as 48 bits per pixel.
    Thanks.
- id: 134451
  author: 'SourceForge.net: GDCM Summer of Code 2011 - gdcm'
  author_email: ''
  author_url: http://sourceforge.net/apps/mediawiki/gdcm/index.php?title=GDCM_Summer_of_Code_2011
  date: '2011-04-13 18:21:38 -0400'
  date_gmt: '2011-04-13 22:21:38 -0400'
  content: "<!--%kramer-ref-pre%-->[...] References:   ftp://medical.nema.org/medical/dicom/final/sup106_ft.pdf
    \ http://en.wikipedia.org/wiki/JPIP  http://code.google.com/p/openjpeg/  http://www.kakadusoftware.com/documents/jpip-kakadu-superceded.pdf
    \ http://www.jpeg.org/jpeg2000/j2kpart9.html  GSoC: JPEG2000 JPIP Server and Viewer
    Applet [...]<!--%kramer-ref-post%-->"
---
<p>OhioLINK was excited and privileged to participate in the second annual <a href="http://code.google.com/soc/" title="Google Summer of Code homepage">Google Summer of Code</a> -- a program to inspire young developers and provide students in Computer Science and related fields the opportunity to do work related to their academic pursuits during the summer, and to support existing open source projects and organizations.  This is the first of three posts summarizing the efforts of three students; this one details the work of <strong>Juan Pablo Garcia Ortiz</strong>, a Ph.D. candidate at the University of Almeria in Spain, to build a <strong>JPEG2000 JPIP Streaming Server and Client Browser Viewer Applet</strong>.  This is an edited version of his final report.</p>
<p>The final applications are the '<span class="removed_link" title="http://drc-dev.ohiolink.edu/browser/jpip_server/">jpip_server</span>' and the '<span class="removed_link" title="http://drc-dev.ohiolink.edu/browser/J2KViewer/">J2KViewer</span>' &mdash; both of which can be found in the <span class="removed_link" title="https://drc-dev.ohiolink.edu/svn/">OhioLINK subversion repository</span>.  Please note that both are built atop the <a href="http://www.kakadusoftware.com/" title="Kakadu Softwarehomepage">Kakadu JPEG2000 code library</a>, only a portion of which is included in the OhioLINK subversion repository. <footnote>Editorial comment:  although not released with an open source license, the Kakadu JPEG2000 code library is available at a very reasonable cost.  Juan Pablo's efforts initially started with one of the open source JPEG2000 libraries, but it was quickly determined that the Kakadu library was required to meet the demands of the project proposal.</footnote></p>
<h2>JPIP Streaming Server</h2>
<p>The JPIP Streaming Sever was not the primary focus of Juan Pablo's efforts, but it was required in order to achieve the primary objective.  It is a very simple implementation, supporting only HTTP channels with JPP streams.   The server is multi-threaded and supports channel reconnection. Only a reduced set of JPIP parameters are supported &mdash; the ones necessary for the implementation of the Java JPIP client.  (In Juan Pablo's opinion, the simple image browser client he was developing did not require additional functionality at the server end.)</p>
<p>The multi-threaded mechanism is implemented with the Linux 'pthread' library and uses one thread for each client socket.  The source code is written in C++, using the STL library to simplify the code, making it more legible, and orienting it to the object oriented programming philisophy.  The different modules of the program are:</p>
<ul>
<li><strong>report.cpp</strong> (report.h): For the class 'report', used to generate the applications logs.</li>
<li><strong>sock.cpp</strong> (sock.h): For the class 'sock', used to simplify the sockets work in Linux.</li>
<li><strong>j2k.cpp</strong> (j2k.h): Contains the class 'j2k_image_file', used to abstract the work with J2K images. It also contains the necessary code to initialize the Kakadu message handling system.</li>
<li><strong>jpip.cpp</strong> (jpip.h): Contains several classes to support a basic version of the JPIP protocol, over the Kakadu library.</li>
<li><strong>jpip_server.cpp</strong>: The main module.</li>
</ul>
<p>It is recommended to start from a freshly unpacked (but not yet build) version of the Kakadu library source code (version 5.1).  To build this JPIP, follow these steps:</p>
<ol>
<li>At the top level of the Kakadu source directory, checkout the 'jpip_server' directory from the OhioLINK Subversion respository.  The Subversion URI is https://drc-dev.ohiolink.edu/svn/jpip_server/</li>
<li>Change the current directory into 'jpip_server' and call the script '<span class="removed_link" title="http://drc-dev.ohiolink.edu/browser/jpip_server/kakadu_rebuild">kakadu_rebuild</span>'. The script will create the Kakadu directory structure, apply some necessary patches, and build the Kakadu libraries.  Please note that this script was written for Kakadu version 5.1 and the patches may not be required in subsequent versions.</li>
<li>Run 'make' (inside the jpip_server directory)</li>
</ol>
<p>The accepted parameters by the server can be seen executing 'jpip_server -u'. The images served by the server must be, by default, in the same directory. The command line option '-ipath' allows you to define a base path for all the requested images.  This server can be tested with the 'kdu_show' application of the Kakadu package.  (kdu_show is a Windows application, but can be executed in Linux with WINE without problems.)</p>
<h2>JPIP Browser Applet</h2>
<p>The second application is a JPIP Java viewer, implemented as an applet.  It requires the Kakadu JNI library; the portions of the Kakadu JNI library for Windows and Linux required to implement the JPIP applet are included in the source code repository.  To build the JPIP Java viewer, follow these steps:</p>
<ol>
<li>Checkout of the 'J2KViewer' directory from the OhioLINK Subversion respository.  The Subversion URI is https://drc-dev.ohiolink.edu/svn/J2KViewer/.</li>
<li>From within the J2KViewer directory, run 'make'.</li>
</ol>
<p>The build process creates a JAR file containing the viewer applet. It's correct use would be to sign it with a official signature and include it into the appropriate Web page as an applet. The applet accepts the following parameters:</p>
<ul>
<li>"<strong>Image</strong>": required, specifies the JPEG2000 image to view. If it's a local image (not typical), this would be a path name (for example '<code>/home/jportiz/image.jp2</code>'). If it's a remote image (the typical usage) through the JPIP server, it would be a JPIP URI (for example, '<code>jpip://server:9000/image.jp2</code>'). Do not include any JPIP parameters in this URI.</li>
<li>"<strong>MiniViewWidth</strong>": optional, specifies the width, in pixels, of the mini-view.</li>
<li>"<strong>MiniViewHeight</strong>": optional, specifies the height, in pixels, of the mini-view. The final mini-view size will be the maximum multiple by 2 size of the image that can be included within the specified mini-view size. By default, the mini-view size is 250x250.</li>
</ul>
<p>To be able to test easily the applet, you can run '<code>make test</code>' to create a 'test.html' file and a 'test' script. This script launches the applet viewer with the 'test.html' page. It is necessary to modify the 'Image' parameter of this HTML page to set the appropriate image location.</p>
<p>To test the applet within a web browser, you can run '<code>make test-signed</code>' to create a signed JAR file, then open 'test-signed.html' with a Java compatible browser.  Before opening the HTML page,  it is necessary to modify the 'Image' parameter within the page to set the appropriate image location.</p>
<p>The viewer has a simple UI. It has a toolbar with two buttons, one to select the interaction mode (zoom or pan) and another one to show the mini-view window. There is a status bar where is showed the real image<br />
size and the current scale, and in the right side, the current number of bytes read. In the center panel is the image &mdash; initially scaled by 2 fo fit it in the applet size. This behaviour can be modified easily in the code.</p>
<p>The mini-view window can be moved to any part of the main window. If it's closed, it can be showed again with the associated button of the toolbar.  The mini-view contains a red rectangle outlining the actual view of the main window. This red rectangle can be moved by dragging it and the corresponding view in the main window will be updated.</p>
<p>The applet requires that the Kakadu JNI library is stored in the user home directory ('C:\Document And Settings\User' in Windows and '/home/user' in Linux). The applet detects if this library exists and if it is not found the applet allows it to be download automatically from the OhioLINK repository and stored it in the user home directory.</p>
<p>This is a brief description of the implemented classes:</p>
<ul>
<li><strong>ChunkedInputStream</strong>: An InputStream derived class to decode HTTP chunked messages.</li>
<li><strong>HTTPMessage</strong>: The base class of all the HTTP message classes.</li>
<li><strong>HTTPRequest</strong>: Identifies a HTTP request.</li>
<li><strong>HTTPResponse</strong>: Identifies a HTTP response.</li>
<li><strong>HTTPSocket</strong>: Derives from Socket and allows HTTP messages to be sent and received in an easy way. In only supports send HTTP requests and receive HTTP responses (a client socket).</li>
<li><strong>ImagePanel</strong>: A GUI panel that can be included in any image browser.  This panel has the necessary methods to load images and control its visualization. It supports the display of a mini-view of the image. All of the image navigation is controlled directly within this panel.</li>
<li><strong>ImageWindow</strong>: An interface to implement all the parent windows that include an ImagePanel obejct.</li>
<li><strong>J2KCache</strong>: A wrapper class for the Kdu_cache Kakadu class. This encapsulation allows another J2K engine to be used while avoiding the need to modify the design and code of the applet.</li>
<li><strong>J2KEngine</strong>: Contains all the necessary code to initialize the J2K engine.  In our case, the Kakadu J2K engine.</li>
<li><strong>J2KException</strong>: A Exception derived class to identify the exceptions generated by the J2K code.</li>
<li><strong>J2KImage</strong>: This class contains all the necessary code to work with J2K images, local files as well as remote URIs. If the image is local, the Kakadu library    functions are used to open it. If the image is remote, a J2KReader object is used to retreive the content.</li>
<li><strong>J2KImageView</strong>: Defines an image view, renderable on the screen. This image view is defined by its coordenates, size and resolution level.</li>
<li><strong>J2KReader</strong>: An implementation of a basic JPIP client to read the necessary data of a specific image view.</li>
<li><strong>J2KRender</strong>: Implements the rendering thread of the image browser. This thread is always generating the current image view. It stops when this view is rendered and the image content is completed (if the image is remote, this means that all of the required image codestream blocks have been received).</li>
<li><strong>J2KViewer</strong>: The main class of the application.</li>
<li><strong>JpipConstants</strong>: Defines several global constants related to the JPIP protocol.</li>
<li><strong>JpipDataInputStream</strong>: An InputStream-derived class to extract JPIP data segments from an    input.</li>
<li><strong>JpipDataSegment</strong>: Contains the information of a JPIP data segment, which can be either an EOR message or a data-bin segment.</li>
<li><strong>Mutex</strong>: A simple mutex implementation in Java, used to avoid threads conflicts when accessing to the image data.</li>
<li><strong>StringInputStream</strong>: An InputStream-derived class to extract strings from inputs without buffering. Useful to decode HTTP headers and chunks lengths.</li>
</ul>
<p>The viewer follows the JPIP philosophy in the code structure, especially with remote images.  That is, when it is displaying a remote image, there are three threads running in parallel: one for the main GUI, a second for the JPIP comunication that is making the requests and filling the cache with the received data, and a third to render the cache content on the user's display.</p>
<p>The Java JPIP viewer has been tested in Windows and in Linux. In Windows it has been used the Sun JVM/JRE 1.5 without problems. However, in Linux, this JVM/JRE version seems quite unstable, requiring the previous version, 1.4.2.  In Linux the Blackdown JVM 1.4.2 as well as the Sun JVM 1.4.2 have been tested with succesful results.</p>
<h2>Future Development Goals</h2>
<p>The most important feature to include, in Juan Pablo's opinion as well as my own, is to make the client applet independent of the Kakadu library; that is, to use an open source J2K engine.  Juan Pablo is currently collaborating a bit with the <a href="http://en.wikipedia.org/wiki/HiRISE">HiRISE project</a> in order to implement a pure Java JPIP code.  It needs to use an efficient pure Java J2K engine. They are currently modifing the JJ2000 code in order to improve it and adapt it within the JPIP client. When this goal was reached, it should be included into the current J2KViewer implementation.</p>
<p>Another feature that was part of the original design but was not completed due to time pressures was to integrate the JPIP server and client into the <a href="http://www.fedora.info/" title="FEDORA digital object repository homepage">FEDORA digital object repository</a> system.  There is also room for a lot of more features: support of the HTTP-TCPtransport protocol, allow for the display of the image metadata, more GUI utilities like the ability to save the image as a local file for image processing, increase the set of supported JPIP parameters, etc.</p>
<h2>Gratitude and Acknowledgements</h2>
<p>OhioLINK offers its congratulations to Juan Pablo for successfully completing the Google Summer of Code project and we look forward to working with him to continue the development effort.  We anticipate integrating his work into the <a href="http://info.drc.ohiolink.edu/" title="Ohio Digital Resource Commons homepage | Save, Discover, and Share Your Resources and the Resources of the World">Ohio Digital Resource Commons Project</a> in the coming year.  We also offer our gratitude to Google for not only their financial support of the Summer of Code program but also for the efforts of Chris, Greg, Leslie and countless other Google staff members in supporting the logistics of this world-wide effort.  I would also like to thank Ron Murray and others at the Preservation Reformatting Division of the Library of Congress for helping think through the requirements and their general support for the effort to bring JPEG2000 to the world of archives and libraries.</p>
<p style="padding:0;margin:0;font-style:italic;" class="removed_link">The text was modified to remove a link to http://drc-dev.ohiolink.edu/browser/jpip_server/ on January 13th, 2011.</p>
<p style="padding:0;margin:0;font-style:italic;" class="removed_link">The text was modified to remove a link to http://drc-dev.ohiolink.edu/browser/J2KViewer/ on January 13th, 2011.</p>
<p style="padding:0;margin:0;font-style:italic;" class="removed_link">The text was modified to remove a link to http://drc-dev.ohiolink.edu/browser/jpip_server/kakadu_rebuild on January 13th, 2011.</p>
